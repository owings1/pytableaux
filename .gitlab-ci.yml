before_script:
  - export IMAGE_NAME=${CI_REGISTRY_IMAGE}
  - export IMAGE_TAG=${CI_COMMIT_SHA}

stages:
  - build
  - test
  - publish
  - cleanup

build_image:
  stage: build
  tags:
    - shell
  script:
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .

run_tests:
  stage: test
  tags:
    - shell
  script:
    - docker run -t --rm ${IMAGE_NAME}:${IMAGE_TAG} python src/test.py

test_container:
  stage: test
  tags:
    - shell
  script:
    - CONTAINER_NAME=CI-${CI_PROJECT_NAME}-${CI_JOB_ID}
    - docker run -d --name $CONTAINER_NAME ${IMAGE_NAME}:${IMAGE_TAG}
    - sleep 30
    - while true; do
    -   STATUS=`docker inspect -f '{{.State.Health.Status}}' $CONTAINER_NAME`
    -   echo 'Container status:' $STATUS
    -   if [[ $STATUS = unhealthy ]]; then
    -     exit 1
    -   elif [[ $STATUS = healthy ]]; then
    -     break
    -   fi
    -   sleep 5
    - done
    - docker rm -f $CONTAINER_NAME

push_image:
  stage: publish
  tags:
    - shell
  only:
    - tags
    - /^v[0-9.]+$/
  script:
    - VERSION=${CI_COMMIT_TAG:1}
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" --email "$GITLAB_USER_EMAIL" "$CI_REGISTRY"
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:${VERSION}
    - docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:${VERSION}
    - docker push ${IMAGE_NAME}:latest

remove_image:
  stage: cleanup
  tags:
    - shell
  script:
    - IMAGE_TAG=${CI_COMMIT_SHA}
    - docker rmi ${IMAGE_NAME}:${IMAGE_TAG}