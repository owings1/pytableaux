from types import ModuleType
from typing import (Any, Callable, ClassVar, Collection, Iterable, Iterator,
                    Mapping, Reversible, overload)

from pytableaux import proof
from pytableaux.lang import Operator
from pytableaux.models import BaseModel
from pytableaux.proof import Rule
from pytableaux.tools import abcs, hybrids, mappings
from pytableaux.typing import (_T, _LogicLocatorRef, _LogicLookupKey,
                               _LogicModule)


def key_category_order(logic: _LogicModule) -> int:...
def instancecheck(obj: Any) -> bool:...

registry: Registry

class LogicType:
    name: str
    class Meta:
        category: str
        description: str
        category_order: int
        tags: Collection[str]
        native_operators: Collection[Operator]
    class TableauxSystem(proof.TableauxSystem): ...
    class Model(BaseModel): ...
    class TabRules:
        closure_rules: ClassVar[tuple[type[Rule], ...]]
        rule_groups: ClassVar[tuple[tuple[type[Rule], ...], ...]]
        all_rules: ClassVar[tuple[type[Rule], ...]]

class Registry(mappings.MappingApi[_LogicLookupKey, _LogicModule], abcs.Copyable, Reversible[_LogicLookupKey]):
    packages: hybrids.qset[str]
    modules: hybrids.QsetView[str]
    index: Mapping[_LogicLookupKey, str]
    def __init__(self, *, source: Registry = ...) -> None: ...
    def __call__(self, key: _LogicLookupKey, /) -> _LogicModule: ...

    @overload
    def get(self, key: _LogicLookupKey) -> _LogicModule: ...
    @overload
    def get(self, key: _LogicLookupKey, default: _T) -> _LogicModule|_T: ...
    @overload
    def locate(self, key: _LogicLocatorRef) -> _LogicModule: ...
    @overload
    def locate(self, key: _LogicLocatorRef, default: _T) -> _LogicModule|_T: ...

    def add(self, logic: _LogicModule) -> None:...
    def all(self) -> Iterator[str]: ...
    def clear(self) -> None: ...
    def discard(self, logic: _LogicModule) -> None: ...
    def grouped(self, keys: Iterable[_LogicLookupKey], /, *, sort: bool = ..., key: Callable = ..., reverse: bool = ...,) -> dict[str, list[_LogicModule]]:...
    def import_all(self) -> None:...
    def import_package(self, package: str|ModuleType, /) -> None:...
    def package_all(self, package: str|ModuleType, /) -> Iterator[str]:...
    def remove(self, logic: _LogicModule) -> None:...
    def sync_package(self, package: str|ModuleType, /) -> set[str]:...
    def sync(self) -> set[str]: ...

    @staticmethod
    def _module_keys(logic: _LogicModule, /) -> tuple[_LogicModule, str, str, str]:...
    @staticmethod
    def _package_all(package: ModuleType, /) -> Iterator[str]:...
    class Index(mappings.dmap):...
