from collections.abc import Sequence, MutableSequence
import enum as _enum
from typing import (ClassVar, Generator, Generic, Hashable, Iterable, Iterator, Literal, Self,
                    SupportsIndex, overload)

from pytableaux.tools import abcs
from pytableaux.tools.hybrids import MutableSequenceSet
from pytableaux.typing import _VT, _LnkT


def iter_links(origin: Link[_VT]|None, step: SupportsIndex = ..., count: SupportsIndex = ...) -> Generator[Link[_VT], None, None]: ...
def iter_links_sliced(seq: LinkSequence[_VT], slice_: slice) -> Generator[Link[_VT], None, None]: ...
def iter_link_values(origin: Link[_VT]|None, step: SupportsIndex = ..., count: SupportsIndex = ...) -> Generator[_VT, None, None]: ...
def iter_link_values_sliced(seq: LinkSequence[_VT], slice_: slice) -> Generator[_VT, None, None]: ...

class LinkRel(_enum.IntEnum):
    prev: Literal[-1]
    self: Literal[0]
    next: Literal[1]

class Link(Generic[_VT]):
    value: _VT
    prev: Link[_VT]|None
    next: Link[_VT]|None
    @property
    def self(self) -> Self: ...
    def __init__(self, value: _VT) -> None: ...
    @overload
    def __getitem__(self:_LnkT, rel: Literal[-1,1]) -> _LnkT|None: ...
    @overload
    def __getitem__(self, rel: Literal[0]) -> Self: ...
    def __getitem__(self, rel: SupportsIndex) -> _LnkT|None: ...
    def __setitem__(self, rel: SupportsIndex, link: Link): ...
    def invert(self) -> None: ...

class HashLink(Link[_VT], Hashable):
    prev: HashLink[_VT]
    next: HashLink[_VT]

class LinkSequence(Sequence[_VT], abcs.Copyable):
    __link_first__: Link[_VT]|None
    __link_last__: Link[_VT]|None
    def _link_at(self, index: SupportsIndex, /) -> Link[_VT]:...
    def _link_of(self, value: _VT, /) -> Link[_VT]:...
    
class linkseq(LinkSequence[_VT], MutableSequence[_VT]):
    _link_type_: ClassVar[type[Link[_VT]]]
    __link_first__: Link[_VT]|None
    __link_last__: Link[_VT]|None
    def __init__(self, values: Iterable = ...) -> None: ...
    def _seed(self, link: Link[_VT], /):...
    def _spot(self, rel: Literal[-1,1], neighbor: Link[_VT], link: Link[_VT], /):...
    def _unlink(self, link: Link[_VT], /):...

class linqset(linkseq[_VT], MutableSequenceSet[_VT]):
    __link_first__: HashLink[_VT]|None
    __link_last__: HashLink[_VT]|None
    def wedge(self, value: _VT, neighbor: _VT, rel: Literal[-1,1]) -> None: ...
    def iter_from_value(self, value: _VT, *, reverse: bool = ..., step: SupportsIndex = ...) -> Iterator[_VT]: ...
    def _link_of(self, value: _VT, /) -> HashLink[_VT]:...
