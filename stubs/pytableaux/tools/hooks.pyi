from pytableaux.tools import abcs
from types import FunctionType
from typing import Any, Mapping, Reversible, Set, Callable, ClassVar, Collection, Iterator, Literal, TypeVar, TypedDict, overload
from _typeshed import SupportsRichComparison as _SupportsRichCompare
from pytableaux.typing import _TT

_UserInfo = Mapping[type, Mapping[str, Callable]]
_ProviderInfo = Mapping[str, Collection[str]]|Literal[abcs.abcf.inherit]

class HookProvider(_ProviderInfo):
    Providers: ClassVar[Mapping[type, _ProviderInfo]]
    provider: type
    mapping: Mapping[str, tuple[str, ...]]
    xmap: Mapping[type, Mapping[str, tuple[HookConn, ...]]]
    def __new__(cls, provider: type): ...
    def hooknames(self, attrname: str = ...) -> list[str]: ...
    def attrnames(self, hookname: str = ...) -> list[str]: ...
    def hookattrs(self) -> list[tuple[str, str]]: ...
    def attrs(self, hookname: str = ...) -> list[tuple[str, FunctionType]]: ...
    def users(self) -> list[type]: ...
    def connections(self, user: type = ..., *, hookname: str = ..., attrname: str = ..., key: Callable[[HookConn], Any] = ..., reverse: bool = ...) -> list[HookConn]: ...
    def excluding(self, hooknames: Set[str]) -> dict[str, tuple[str, ...]]: ...
    def only(self, hooknames: Collection[str]) -> dict[str, tuple[str, ...]]: ...
    def __len__(self): ...
    def __getitem__(self, key) -> tuple[str, ...]: ...
    def __iter__(self) -> Iterator[str]: ...
    def __reversed__(self) -> Iterator[str]: ...

class hookutil:
    @staticmethod
    def provider_info(provider: type) -> HookProvider: ...
    @staticmethod
    @overload
    def init_provider(provider: _TT) -> _TT: ...
    @staticmethod
    @overload
    def init_provider(provider: _TT, initial: _ProviderInfo) -> _TT: ...
    @staticmethod
    @overload
    def init_user(user: _TT) -> _TT: ...
    @overload
    @staticmethod
    def init_user(user: _TT, initial: _UserInfo) -> _TT: ...

class HookConn(Mapping[str, Any], Reversible[str], TypedDict, _SupportsRichCompare): # type: ignore
    provider: type
    user: type
    hookname: str
    attrname: str
    declared: FunctionType
    resolved: FunctionType
    is_copied: bool
    callback: Callable
