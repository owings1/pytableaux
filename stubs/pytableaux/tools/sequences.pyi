from typing import Collection, Iterable, Sequence, SupportsIndex, overload

from pytableaux.tools import abcs
from pytableaux.typing import _VT, _MSeqT, _SeqT


class SequenceApi(Sequence[_VT]):
    @overload
    def __getitem__(self, i: SupportsIndex) -> _VT: ...
    @overload
    def __getitem__(self:_SeqT, s: slice) -> _SeqT: ...
    @overload
    def __delitem__(self, i: SupportsIndex)->None: ...
    @overload
    def __delitem__(self, i: slice)->None: ...
    @overload
    def __setitem__(self, i: SupportsIndex, value: _VT)->None: ...
    @overload
    def __setitem__(self, i: slice, value: Collection)->None: ...
    def __mul__(self:_SeqT, other: SupportsIndex) -> _SeqT: ...
    def __rmul__(self:_SeqT, other: SupportsIndex) -> _SeqT: ...
    def __add__(self:_SeqT, other: Iterable) -> _SeqT: ...
    def __radd__(self:_SeqT, other: Iterable) -> _SeqT: ...
    @classmethod
    def _from_iterable(cls: type[_SeqT], it: Iterable) -> _SeqT:...
    @classmethod
    def _concat_res_type(cls, othrtype: type[Iterable], /) -> type[SequenceApi]: ...
    @classmethod
    def _rconcat_res_type(cls, othrtype: type[Iterable], /) -> type[SequenceApi]: ...

class SeqCover(Sequence[_VT], abcs.Copyable): ...
