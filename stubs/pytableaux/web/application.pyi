import cherrypy as chpy
import jinja2
import logging
from _typeshed import Incomplete
from cherrypy._cprequest import Request
from pytableaux.lang import Notation
from pytableaux.lang.writing import LexWriter
from pytableaux.proof import tableaux
from pytableaux.tools.events import EventEmitter
from pytableaux.web.util import AppMetrics
from typing import Any, ClassVar, Mapping

class WebApp(EventEmitter):
    view_versions: ClassVar[frozenset[str]]
    config: dict[str, Any]
    static_res: dict[str, bytes]
    metrics: AppMetrics
    routes: dict[str, dict[str, Any]]
    logger: logging.Logger
    template_cache: dict[str, jinja2.Template]
    jenv: jinja2.Environment
    base_view_data: Mapping[str, Any]
    lw_cache: ClassVar[Mapping[Notation, Mapping[str, LexWriter]]]
    jsapp_data: ClassVar[Mapping[str, Any]]
    api_defaults: ClassVar[Mapping[str, Any]]
    form_defaults: ClassVar[Mapping[str, Any]]
    view_data_defaults: ClassVar[Mapping[str, Any]]
    config_defaults: ClassVar[Mapping[str, Any]]
    routes_defaults: ClassVar[Mapping[str, Mapping[str, Any]]]
    is_class_setup: ClassVar[bool]
    @classmethod
    def setup_class_data(cls) -> None: ...
    mailroom: Incomplete
    def __init__(self, opts: Mapping[str, Any] = ..., **kw) -> None: ...
    def init_events(self): ...
    def start(self) -> None: ...
    def static(self, *respath, **req_data): ...
    def index(self, **req_data): ...
    def feedback(self, **form_data) -> str: ...
    def api(self, action: str = ...) -> dict[str, Any]: ...
    def api_parse(self, body: Mapping) -> dict[str, Any]: ...
    def api_prove(self, body: Mapping[str, Any]) -> tuple[dict, tableaux.Tableau, LexWriter]: ...
    def get_template(self, view: str) -> jinja2.Template: ...
    def render(self, view: str, *args, **kw) -> str: ...
    def get_remote_ip(req: Request) -> str: ...
    @staticmethod
    def trim_resp_debug(resp_data: dict) -> dict: ...

class AppDispatcher(chpy._cpdispatch.Dispatcher):
    def __call__(self, path_info: str): ...
    def webapp(self) -> WebApp: ...
    def before_dispatch(self, *args) -> None: ...
