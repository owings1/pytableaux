
from __future__ import annotations
from typing import overload, TypeVar
from collections.abc import Iterable, MutableSet, Set
T = TypeVar('T')
V = TypeVar('V')
from tools.abcs import Copyable

class SetApi(Set[V], Copyable):
    'Fusion interface of collections.abc.Set and built-in frozenset.'

    def __or__(self:T, other) -> T: ...
    def __and__(self:T, other) -> T: ...
    def __sub__(self:T, other) -> T: ...
    def __xor__(self:T, other) -> T: ...
    def issubset(self, other: Iterable) -> bool: ...
    def issuperset(self, other: Iterable) -> bool: ...
    def union(self:T, *others: Iterable) -> T: ...
    def intersection(self:T, *others: Iterable) -> T: ...
    def difference(self:T, *others: Iterable) -> T: ...
    def symmetric_difference(self:T, other: Iterable) -> T: ...

    def stubtest(self) -> slice: ...

class MutableSetApi(SetApi[V], MutableSet[V]):
    'Fusion interface of collections.abc.MutableSet and built-in set.'

    def update(self, *others: Iterable) -> None: ...
    def intersection_update(self, *others: Iterable): ...
    def difference_update(self, *others: Iterable): ...
    def symmetric_difference_update(elf, other: Iterable): ...

